/**
 * @defgroup    boards_microduino-corerf Microduino CoreRF
 * @ingroup     boards
 * @brief       Support for the Microduino CoreRF board

# Hardware
## Pinout

![corerf-pinout](https://wiki.microduinoinc.com/images/d/df/RF%E5%BC%95%E8%84%9A.jpg)

## Board
The board is just a breakout for the ATmega128RFA1 MCU.

## MCU Details
| MCU           | ATmega128RFA1         |
|:------------- |:--------------------- |
| Family	| ATmega                |
| Vendor	| Atmel	                |
| Package       | QFN/MLF               |
| SRAM		| 16Kb                  |
| Flash		| 128Kb                 |
| EEPROM        | 4K                    |
| Core Frequency | 8MHz (16MHz no power save mode) |
| Oscillators   | 32.768 kHz & 16 MHz   |
| Timers	| 6 ( 2x8bit & 4x16bit ) |
|Analog Comparator |   1    |
| ADCs		| 1x 15 channel 6 to 12-bit |
| USARTs        | 2                     |
| SPIs		| 3 (1 SPI & 2 USART SPI) |
| I2Cs		| 1 (called TWI)	|
| Vcc		| 1.8V - 3.6V		|
| Datasheet / Reference Manual | [Datasheet and Reference Manual](http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-8266-MCU_Wireless-ATmega128RFA1_Datasheet.pdf) |
| Board Manual	|  |
| Pins          |  |


# Flashing RIOT
Flashing RIOT on the CoreRF is quite straight forward, just connect your CoreRF using the USB port
to your host computer and type:

`make flash BOARD=microduino-corerf`

This should take care of everything!

RIOT's Makefile are configured to flash the jiminy using AVRDUDE. The bootloader automatically matches
to the configured baud rate which is set for AVRDUDE. Rates of up to 500kBaud can be used.

# Troubleshooting

## Using the external crystal oscillator (Transceiver Crystal Oscillator) and deep sleep

When the external crystal oscillator is used as system clock and the device is put into deep sleep mode it seems that
the clocks for all peripherals are enabled and set to the smallest divider (highest frequency). This leads to a higher
power consumption. When the device should be put into deep sleep it is recommended to use the internal RC oscillator
as system clock source.

## Pin Change Interrupts

More pins can be used for hardware interrupts using the Pin Change
Interrupt feature. See @ref boards_common_atmega for details.

 */
